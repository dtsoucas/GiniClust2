colnames(barData4)<-c("Clustering","Standard")
p2<-ggplot(data=as.data.frame(barData4), aes(Standard,fill=as.factor(Clustering))) +
geom_bar(stat="count",position="dodge")+labs(x="Cell Type",y="Count",fill="Clusters")+
scale_y_log10()
p2
p2<-ggplot(data=as.data.frame(barData4), aes(Standard,fill=as.factor(Clustering))) +
geom_bar(stat="count",position="dodge")+labs(x="Cell Type",y="Count",fill="Clusters")
p2
p2<-ggplot(data=as.data.frame(barData4), aes(Clustering,fill=as.factor(Standard))) +
geom_bar(stat="count",position="dodge")+labs(x="Cell Type",y="Count",fill="Clusters")
p2
p2<-ggplot(data=as.data.frame(barData4), aes(Clustering,fill=as.factor(Standard))) +
geom_bar(stat="count")+labs(x="Cell Type",y="Count",fill="Clusters")
p2
p2<-ggplot(data=as.data.frame(barData4), aes(Clustering,fill=as.factor(Standard))) +
geom_bar(stat="count")+labs(x="GiniClust2 Clusters",y="Count",fill="RaceID2 Clusters")
p2
p2<-ggplot(data=as.data.frame(barData4), aes(Clustering,fill=as.factor(Standard))) +
geom_bar(stat="count",position="dodge")+labs(x="GiniClust2 Clusters",y="Count",fill="RaceID2 Clusters")
p2
p2<-ggplot(data=as.data.frame(barData4), aes(Clustering,fill=as.factor(Standard))) +
geom_bar(stat="count")+labs(x="GiniClust2 Clusters",y="Count",fill="RaceID2 Clusters")
p2
minCellNum           = 3                                                # filtering, for at least expressed in how many cells
minGeneNum           = 2000                                             # filtering, for at least expressed in how many genes
expressed_cutoff     = 1                                                # filtering, for raw counts
gini.bi              = 0                                                # fitting, default is 0, for qPCR data, set as 1.
log2.expr.cutoffl    = 0                                                # cutoff for range of gene expression
log2.expr.cutoffh    = 20                                               # cutoff for range of gene expression
Gini.pvalue_cutoff   = 0.0001                                           # fiting, Pvalue, control how many gene finally used.
Norm.Gini.cutoff     = 1                                                # fiting, NomGini, control how many gene finally used, 1 means not used.
span                 = 0.9                                              # parameter for LOESS fitting
outlier_remove       = 0.75                                             # parameter for LOESS fitting
GeneList             = 1                                                # parameter for clustering, 1 means using pvalue, 0 means using HighNormGini
Gamma                = 0.99                                             # parameter for clustering
eps                  = 0.5                                              # parameter for DBSCAN
MinPts               = 3                                                # parameter for DBSCAN
mycols               = c("grey50","greenyellow","red","blue","black")   # color setting for tSNE plot
diff.cutoff          = 1                                                # MAST analysis, filter gene don't have high log2_foldchange to reduce gene num
lr.p_value_cutoff    = 1e-5                                             # MAST analysis, pvalue cutoff to identify differential expressed gene
CountsForNormalized  = 100000                                           # not used
rare_p               = 0.05                                             # propostion of cell number < this value will be considered as rare cell clusters.
perplexity           = 30
k                    = 2
gap_statistic        = FALSE
K.max                = 10
automatic_eps        = TRUE
automatic_minpts     = FALSE
Rfundir              = "/Users/Daphne/Documents/Yuan/GiniClust2/Rfunction/"
#dataset specific parameters:
workdir               = "/Users/Daphne/Documents/Yuan/GiniClust2/Proj/Simulation/"
exprimentID           = "simu"                              # experiment or data set ID
CountsForNormalized   = 100000
setwd(workdir)
k=3
source(paste(Rfundir,"GiniClust2_Fano_clustering.R",sep=""))
table(P_G)
table(P_F)
save(P_F,file="results/simu_FanoClusteringk3.RData")
k=4
source(paste(Rfundir,"GiniClust2_Fano_clustering.R",sep=""))
table(P_F)
save(P_F,file="results/simu_FanoClusteringk4.RData")
k=5
source(paste(Rfundir,"GiniClust2_Fano_clustering.R",sep=""))
table(P_F)
save(P_F,file="results/simu_FanoClusteringk5.RData")
k=6
source(paste(Rfundir,"GiniClust2_Fano_clustering.R",sep=""))
table(P_F)
save(P_F,file="results/simu_FanoClusteringk6.RData")
load(file="results/simu_FanoClusteringk3.RData")
P_F_3<-P_F
load(file="results/simu_FanoClusteringk4.RData")
P_F_4<-P_F
load(file="results/simu_FanoClusteringk5.RData")
P_F_5<-P_F
load(file="results/simu_FanoClusteringk6.RData")
P_F_6<-P_F
barData4<-cbind(c(P_F_3,P_F_4,P_F_5,P_F_6),rep(cell_types,4),c(rep("K-means (k=3)",length(P_G)),rep("K-means (k=4)",length(P_G)),rep("K-means (k=5)",length(P_F)),rep("K-means (k=6)",length(P_G)))))
barData4<-cbind(c(P_F_3,P_F_4,P_F_5,P_F_6),rep(cell_types,4),c(rep("K-means (k=3)",length(P_G)),rep("K-means (k=4)",length(P_G)),rep("K-means (k=5)",length(P_F)),rep("K-means (k=6)",length(P_G))))
colnames(barData4)<-c("Clustering","Standard","Method")
p2<-ggplot(data=as.data.frame(barData4), aes(Standard,fill=as.factor(Clustering),xlab="Developmental Stage"),vjust=1) +
geom_bar(stat="count",position="dodge")+labs(x="Cell Type",y="Count",fill="Clusters")+
facet_wrap(~Method,nrow=1)+scale_y_log10()
p2
load(file="results/simu_FanoClusteringk3.RData")
k=3
source(paste(Rfundir,"GiniClust2_Fano_clustering.R",sep=""))
table(P_F)
source(paste(Rfundir,"GiniClust2_consensus_clustering.R",sep=""))
table(finalCluster)
P_F_3<-P_F
save(P_F_3,file="results/simu_FanoClusteringk3.RData")
save(finalCluster_3,file="results/simu_FinalClusteringk3.RData")
finalCluster_3<-finalCluster
save(finalCluster_3,file="results/simu_FinalClusteringk3.RData")
load(file="results/simu_FinalClusteringk3.RData")
load(file="results/simu_FanoClusteringk3.RData")
k=4
source(paste(Rfundir,"GiniClust2_Fano_clustering.R",sep=""))
table(P_F)
source(paste(Rfundir,"GiniClust2_consensus_clustering.R",sep=""))
P_F_4<-P_F
table(finalCluster)
save(P_F_4,file="results/simu_FanoClusteringk4.RData")
finalCluster_4<-finalCluster
save(finalCluster_4,file="results/simu_FinalClusteringk4.RData")
k=5
source(paste(Rfundir,"GiniClust2_Fano_clustering.R",sep=""))
source(paste(Rfundir,"GiniClust2_consensus_clustering.R",sep=""))
finalCluster_4<-finalCluster
finalCluster_5<-finalCluster
P_F_5<-P_F
save(finalCluster_5,file="results/simu_FinalClusteringk5.RData")
save(P_F_5,file="results/simu_FanoClusteringk5.RData")
k=6
source(paste(Rfundir,"GiniClust2_Fano_clustering.R",sep=""))
source(paste(Rfundir,"GiniClust2_consensus_clustering.R",sep=""))
P_F_6<-P_F
save(P_F_6,file="results/simu_FanoClusteringk6.RData")
finalCluster_6<-finalCluster
save(finalCluster_6,file="results/simu_FinalClusteringk6.RData")
load(file="results/simu_FanoClusteringk3.RData")
load(file="results/simu_FanoClusteringk4.RData")
load(file="results/simu_FanoClusteringk5.RData")
load(file="results/simu_FanoClusteringk6.RData")
load(file="results/simu_FinalClusteringk3.RData")
load(file="results/simu_FinalClusteringk4.RData")
load(file="results/simu_FinalClusteringk5.RData")
load(file="results/simu_FinalClusteringk6.RData")
barData4<-cbind(c(P_F_3,P_F_4,P_F_5,P_F_6),rep(cell_types,4),c(rep("K-means (k=3)",length(P_G)),rep("K-means (k=4)",length(P_G)),rep("K-means (k=5)",length(P_F)),rep("K-means (k=6)",length(P_G))))
colnames(barData4)<-c("Clustering","Standard","Method")
p2<-ggplot(data=as.data.frame(barData4), aes(Standard,fill=as.factor(Clustering),xlab="Developmental Stage"),vjust=1) +
geom_bar(stat="count",position="dodge")+labs(x="Cell Type",y="Count",fill="Clusters")+
facet_wrap(~Method,nrow=1)+scale_y_log10()
p2
barData4<-cbind(c(finalCluster_3,finalCluster_4,finalCluster_5,finalCluster_6),rep(cell_types,4),c(rep("GiniClust2 (k=3)",length(P_G)),rep("GiniClust2 (k=4)",length(P_G)),rep("GiniClust2 (k=5)",length(P_F)),rep("GiniClust2 (k=6)",length(P_G))))
colnames(barData4)<-c("Clustering","Standard","Method")
p2<-ggplot(data=as.data.frame(barData4), aes(Standard,fill=as.factor(Clustering),xlab="Developmental Stage"),vjust=1) +
geom_bar(stat="count",position="dodge")+labs(x="Cell Type",y="Count",fill="Clusters")+
facet_wrap(~Method,nrow=1)+scale_y_log10()
p2
minCellNum           = 3                                                # filtering, for at least expressed in how many cells
minGeneNum           = 2000                                             # filtering, for at least expressed in how many genes
expressed_cutoff     = 1                                                # filtering, for raw counts
gini.bi              = 0                                                # fitting, default is 0, for qPCR data, set as 1.
log2.expr.cutoffl    = 0                                                # cutoff for range of gene expression
log2.expr.cutoffh    = 20                                               # cutoff for range of gene expression
Gini.pvalue_cutoff   = 0.0001                                           # fiting, Pvalue, control how many gene finally used.
Norm.Gini.cutoff     = 1                                                # fiting, NomGini, control how many gene finally used, 1 means not used.
span                 = 0.9                                              # parameter for LOESS fitting
outlier_remove       = 0.75                                             # parameter for LOESS fitting
GeneList             = 1                                                # parameter for clustering, 1 means using pvalue, 0 means using HighNormGini
Gamma                = 0.9                                              # parameter for clustering
eps                  = 0.34                                              # parameter for DBSCAN
MinPts               = 3                                                # parameter for DBSCAN
mycols               = c("grey50","greenyellow","red","blue","black","pink","orange","yellow","cyan","green","darkgreen","brown","purple")   # color setting for tSNE plot
diff.cutoff          = 1                                                # MAST analysis, filter gene don't have high log2_foldchange to reduce gene num
lr.p_value_cutoff    = 1e-5                                             # MAST analysis, pvalue cutoff to identify differential expressed gene
CountsForNormalized  = 100000                                           # not used
rare_p               = 0.05                                             # propostion of cell number < this value will be considered as rare cell clusters.
perplexity           = 30
k                    = 2
gap_statistic        = FALSE
K.max                = 10
automatic_eps        = FALSE
automatic_minpts     = FALSE
Rfundir              = "/Users/Daphne/Documents/Yuan/GiniClust2/Rfunction/"
#dataset specific parameters:
workdir              = "/Users/Daphne/Documents/Yuan/GiniClust2/Proj/inDrop_day4/"  # where you put the data and results
#GeneList.final       = Genelist.top_pvalue
exprimentID          = "d4"                                                    # experiment or data set ID
setwd(workdir)
load(file="results/d4ExprM.filter.RData")
load(file="results/d4_ExprM.filter.RData")
load(file="/Users/Daphne/Documents/Yuan/GiniClust2/Proj/inDrop_day4/results/d4_FinalClustering.RData")
table(finalCluster)
impGenes<-c("Col4a1","Col4a2","Lama1","Ctsl","Rhox6","Rhox9","Sct","Pim2","Tdgf1","Tcf15","Krt8","Krt18","S100a6","Tagln","Anxa2","Flnc")
dim(ExprM.RawCounts.filter)
inds<-which(rownames(ExprM.RawCounts.filter)%in%impGenes)
inds
length(inds)
length(impGenes)
i
for (i in inds){
ExprM.RawCounts.filter[i,]
}
ExprM.RawCounts.filter[i,]
finalCluster
mean<-c()
for (cluster in unique(finalCluster)){
mean<-c(mean,ExprM.RawCounts.filter[i,which(finalCluster==cluster)]
}
mean<-c()
for (cluster in unique(finalCluster)){
mean<-c(mean,ExprM.RawCounts.filter[i,which(finalCluster==cluster)])
}
mean
mean<-c()
for (cluster in unique(finalCluster)){
mean<-c(mean,mean(ExprM.RawCounts.filter[i,which(finalCluster==cluster)]))
}
mean
ExprM.RawCounts.filter[i,which(finalCluster==cluster)]
mean(ExprM.RawCounts.filter[i,which(finalCluster==cluster)])
mean<-c()
for (cluster in unique(finalCluster)){
mean<-c(mean,mean(as.numeric(ExprM.RawCounts.filter[i,which(finalCluster==cluster)])))
}
mean
mean<-c()
perExpr<-c()
for (cluster in unique(finalCluster)){
mean<-c(mean,mean(as.numeric(ExprM.RawCounts.filter[i,which(finalCluster==cluster)])))
perExpr<-c(perExpr,length(which(ExprM.RawCounts.filter[i,which(finalCluster==cluster)]>0))/length(ExprM.RawCounts.filter[i,which(finalCluster==cluster)]))
}
perExpr
means<-NULL
perExprd<-NULL
for (i in inds){
mean<-c()
perExpr<-c()
for (cluster in unique(finalCluster)){
mean<-c(mean,mean(as.numeric(ExprM.RawCounts.filter[i,which(finalCluster==cluster)])))
perExpr<-c(perExpr,length(which(ExprM.RawCounts.filter[i,which(finalCluster==cluster)]>0))/length(ExprM.RawCounts.filter[i,which(finalCluster==cluster)]))
}
means<-cbind(means,mean)
perExprd<-cbind(perExprd,perExpr)
}
meas
means
impGenes**4
impGenes*4
impGenes
a<-sapply(impGenes, function (x) rep(x,4))
a
a<-as.vector(a)
a
means
as.vector(means)
violin_data<-as.data.frame(cbind(a,as.vector(means),rep(c(1:4),16),c(as.vector(perExprd))))
head(violin_data)
colnames(violin_data)<-c("Gene","Count","Cluster","Percent_Expressed")
violin_data$Count<-as.numeric(violin_data$Count)
violin_data$Percent_Expressed<-as.numeric(violin_data$Percent_Expressed)
colfunc <- colorRampPalette(c("red", "blue"))
plot<-ggplot(violin_data, aes(Gene, Cluster)) +
geom_point(aes(size = Percent_Expressed,color=Count), alpha=1) +
scale_color_continuous(limits=c(0, 100)) + scale_size_continuous(range=c(1,5),limits=c(0,100), breaks=seq(0, 100, by=20))
plot+scale_color_gradient(low="blue", high="red")
violin_data$Gene <- factor(violin_data$Genes, levels = violin_data$Genes)
violin_data$Gene <- factor(violin_data$Gene, levels = violin_data$Gene)
violin_data$Gene <- factor(violin_data$Gene, levels = unique(violin_data$Gene))
plot<-ggplot(violin_data, aes(Gene, Cluster)) +
geom_point(aes(size = Percent_Expressed,color=Count), alpha=1) +
scale_color_continuous(limits=c(0, 100)) + scale_size_continuous(range=c(1,5),limits=c(0,100), breaks=seq(0, 100, by=20))
plot+scale_color_gradient(low="blue", high="red")
summary(violin_data$Percent_Expressed)
summary(violin_data$Count)
plot<-ggplot(violin_data, aes(Gene, Cluster)) +
geom_point(aes(size = Percent_Expressed,color=Count), alpha=1) +
scale_color_continuous(limits=c(0, 35)) + scale_size_continuous(range=c(1,5),limits=c(0,52), breaks=seq(0, 100, by=20))
plot+scale_color_gradient(low="blue", high="red")
plot<-ggplot(violin_data, aes(Gene, Cluster)) +
geom_point(aes(size = Percent_Expressed,color=Count), alpha=1) +
scale_color_continuous(limits=c(0, 35)) + scale_size_continuous(range=c(1,5),limits=c(0,60), breaks=seq(0, 100, by=20))
plot<-ggplot(violin_data, aes(Gene, Cluster)) +
geom_point(aes(size = Percent_Expressed,color=Count), alpha=1) +
scale_color_continuous(limits=c(0, 35)) + scale_size_continuous(range=c(1,7),limits=c(0,60), breaks=seq(0, 100, by=20))
plot+scale_color_gradient(low="blue", high="red")
table(finalCluster)
unique(finalCluster)
violin_data<-as.data.frame(cbind(a,as.vector(means),rep(c(unique(finalCluster)),16),c(as.vector(perExprd))))
colnames(violin_data)<-c("Gene","Count","Cluster","Percent_Expressed")
violin_data$Count<-as.numeric(violin_data$Count)
violin_data$Percent_Expressed<-as.numeric(violin_data$Percent_Expressed)
colfunc <- colorRampPalette(c("red", "blue"))
violin_data$Gene <- factor(violin_data$Gene, levels = unique(violin_data$Gene))
plot<-ggplot(violin_data, aes(Gene, Cluster)) +
geom_point(aes(size = Percent_Expressed,color=Count), alpha=1) +
scale_color_continuous(limits=c(0, 35)) + scale_size_continuous(range=c(1,7),limits=c(0,60), breaks=seq(0, 100, by=20))
plot+scale_color_gradient(low="blue", high="red")
violin_data$Percent_Expressed<-log2(as.numeric(violin_data$Percent_Expressed)+.1)
colfunc <- colorRampPalette(c("red", "blue"))
violin_data$Gene <- factor(violin_data$Gene, levels = unique(violin_data$Gene))
plot<-ggplot(violin_data, aes(Gene, Cluster)) +
geom_point(aes(size = Percent_Expressed,color=Count), alpha=1) +
scale_color_continuous(limits=c(0, 35)) + scale_size_continuous(range=c(1,7),limits=c(0,60), breaks=seq(0, 100, by=20))
plot+scale_color_gradient(low="blue", high="red")
heatmap.2(as.matrix(log2(ExprM.RawCounts.filter+.1))[inds,c(which(finalCluster==1),which(finalCluster==2),which(finalCluster==3),which(finalCluster==4))],trace="none",col=bluered(50),ColSideColors=mycols[c(rep(1,table(finalCluster)[1]),rep(2,table(finalCluster)[2]),rep(3,table(finalCluster)[3]),rep(4,table(finalCluster)[4]))],dendrogram="none",Rowv = FALSE, Colv = FALSE)
heatmap.2(as.matrix(log2(ExprM.RawCounts.filter+.1))[inds,c(which(finalCluster==1),which(finalCluster==2),which(finalCluster==3),which(finalCluster==4))],trace="none",col=bluered(50),ColSideColors=mycols[c(rep(1,table(finalCluster)[1]),rep(2,table(finalCluster)[2]),rep(3,table(finalCluster)[3]),rep(4,table(finalCluster)[4]))],dendrogram="none",Rowv = FALSE, Colv = FALSE)
inds
inds
impGenes
d<-rownames(ExprM.RawCounts.filter)
ind<-c(which(d=="Col4a1"),which(d=="Col4a2"),which(d=="Lama1"),which(d=="Lama2"),which(d=="Ctsl"),which(d=="Rhox6"),which(d=="Rhox9"),which(d=="Sct"),which(d=="Pim2"),which(d=="Tdgf1"),which(d=="Tcf15"),which(d=="Krt8"),which(d=="Krt18"),which(d=="S100a6"),which(d=="Tagln"),which(d=="Anxa2"),which(d=="Flnc"))
heatmap.2(as.matrix(log2(ExprM.RawCounts.filter+.1))[ind,c(which(finalCluster==1),which(finalCluster==2),which(finalCluster==3),which(finalCluster==4))],trace="none",col=bluered(50),ColSideColors=mycols[c(rep(1,table(finalCluster)[1]),rep(2,table(finalCluster)[2]),rep(3,table(finalCluster)[3]),rep(4,table(finalCluster)[4]))],dendrogram="none",Rowv = FALSE, Colv = FALSE)
ind<-c(which(d=="Col4a1"),which(d=="Col4a2"),which(d=="Lama1"),which(d=="Lama2"),which(d=="Ctsl"),which(d=="Rhox6"),which(d=="Rhox9"),which(d=="Sct"),which(d=="Krt8"),which(d=="Krt18"),which(d=="S100a6"),which(d=="Tagln"),which(d=="Anxa2"),which(d=="Flnc"),which(d=="Pim2"),which(d=="Tdgf1"),which(d=="Tcf15"))
heatmap.2(as.matrix(log2(ExprM.RawCounts.filter+.1))[ind,c(which(finalCluster==1),which(finalCluster==2),which(finalCluster==3),which(finalCluster==4))],trace="none",col=bluered(50),ColSideColors=mycols[c(rep(1,table(finalCluster)[1]),rep(2,table(finalCluster)[2]),rep(3,table(finalCluster)[3]),rep(4,table(finalCluster)[4]))],dendrogram="none",Rowv = FALSE, Colv = FALSE)
heatmap.2(as.matrix((ExprM.RawCounts.filter))[ind,c(which(finalCluster==1),which(finalCluster==2),which(finalCluster==3),which(finalCluster==4))],trace="none",col=bluered(50),ColSideColors=mycols[c(rep(1,table(finalCluster)[1]),rep(2,table(finalCluster)[2]),rep(3,table(finalCluster)[3]),rep(4,table(finalCluster)[4]))],dendrogram="none",Rowv = FALSE, Colv = FALSE)
heatmap.2(as.matrix(log2(ExprM.RawCounts.filter+.1))[ind,c(which(finalCluster==1),which(finalCluster==2),which(finalCluster==3),which(finalCluster==4))],trace="none",col=bluered(50),ColSideColors=mycols[c(rep(1,table(finalCluster)[1]),rep(2,table(finalCluster)[2]),rep(3,table(finalCluster)[3]),rep(4,table(finalCluster)[4]))],dendrogram="none",Rowv = FALSE, Colv = FALSE)
which(d=="Lama2")
d<-rownames(ExprM.RawCounts)
ind<-c(which(d=="Col4a1"),which(d=="Col4a2"),which(d=="Lama1"),which(d=="Lama2"),which(d=="Ctsl"),which(d=="Rhox6"),which(d=="Rhox9"),which(d=="Sct"),which(d=="Krt8"),which(d=="Krt18"),which(d=="S100a6"),which(d=="Tagln"),which(d=="Anxa2"),which(d=="Flnc"),which(d=="Pim2"),which(d=="Tdgf1"),which(d=="Tcf15"))
heatmap.2(as.matrix(log2(ExprM.RawCounts.filter+.1))[ind,c(which(finalCluster==1),which(finalCluster==2),which(finalCluster==3),which(finalCluster==4))],trace="none",col=bluered(50),ColSideColors=mycols[c(rep(1,table(finalCluster)[1]),rep(2,table(finalCluster)[2]),rep(3,table(finalCluster)[3]),rep(4,table(finalCluster)[4]))],dendrogram="none",Rowv = FALSE, Colv = FALSE)
d<-rownames(ExprM.RawCounts)
ind<-c(which(d=="Col4a1"),which(d=="Col4a2"),which(d=="Lama1"),which(d=="Lama2"),which(d=="Ctsl"),which(d=="Rhox6"),which(d=="Rhox9"),which(d=="Sct"),which(d=="Krt8"),which(d=="Krt18"),which(d=="S100a6"),which(d=="Tagln"),which(d=="Anxa2"),which(d=="Flnc"),which(d=="Pim2"),which(d=="Tdgf1"),which(d=="Tcf15"))
heatmap.2(as.matrix(log2(ExprM.RawCounts+.1))[ind,c(which(finalCluster==1),which(finalCluster==2),which(finalCluster==3),which(finalCluster==4))],trace="none",col=bluered(50),ColSideColors=mycols[c(rep(1,table(finalCluster)[1]),rep(2,table(finalCluster)[2]),rep(3,table(finalCluster)[3]),rep(4,table(finalCluster)[4]))],dendrogram="none",Rowv = FALSE, Colv = FALSE)
d
load(file="results/d4_ExprM.RData")
d<-rownames(ExprM.RawCounts)
ind<-c(which(d=="Col4a1"),which(d=="Col4a2"),which(d=="Lama1"),which(d=="Lama2"),which(d=="Ctsl"),which(d=="Rhox6"),which(d=="Rhox9"),which(d=="Sct"),which(d=="Krt8"),which(d=="Krt18"),which(d=="S100a6"),which(d=="Tagln"),which(d=="Anxa2"),which(d=="Flnc"),which(d=="Pim2"),which(d=="Tdgf1"),which(d=="Tcf15"))
heatmap.2(as.matrix(log2(ExprM.RawCounts+.1))[ind,c(which(finalCluster==1),which(finalCluster==2),which(finalCluster==3),which(finalCluster==4))],trace="none",col=bluered(50),ColSideColors=mycols[c(rep(1,table(finalCluster)[1]),rep(2,table(finalCluster)[2]),rep(3,table(finalCluster)[3]),rep(4,table(finalCluster)[4]))],dendrogram="none",Rowv = FALSE, Colv = FALSE)
d<-rownames(ExprM.RawCounts.filter)
ind<-c(which(d=="Col4a1"),which(d=="Col4a2"),which(d=="Lama1"),which(d=="Lama2"),which(d=="Ctsl"),which(d=="Rhox6"),which(d=="Rhox9"),which(d=="Sct"),which(d=="Krt8"),which(d=="Krt18"),which(d=="S100a6"),which(d=="Tagln"),which(d=="Anxa2"),which(d=="Flnc"),which(d=="Pim2"),which(d=="Tdgf1"),which(d=="Tcf15"))
heatmap.2(as.matrix(log2(ExprM.RawCounts.filter+.1))[ind,c(which(finalCluster==1),which(finalCluster==2),which(finalCluster==3),which(finalCluster==4))],trace="none",col=bluered(50),ColSideColors=mycols[c(rep(1,table(finalCluster)[1]),rep(2,table(finalCluster)[2]),rep(3,table(finalCluster)[3]),rep(4,table(finalCluster)[4]))],dendrogram="none",Rowv = FALSE, Colv = FALSE)
heatmap.2(as.matrix(log2(ExprM.RawCounts.filter+.1))[ind,c(which(finalCluster==1),which(finalCluster==2),which(finalCluster==3),which(finalCluster==4))],trace="none",col=bluered(50),ColSideColors=mycols[c(rep(1,table(finalCluster)[1]),rep(2,table(finalCluster)[2]),rep(3,table(finalCluster)[3]),rep(4,table(finalCluster)[4]))],dendrogram="none",Rowv = FALSE, Colv = FALSE,tracecol="NA")
plot+scale_color_gradient(low="blue", high="red")
plot<-ggplot(violin_data, aes(Gene, Cluster)) +
geom_point(aes(size = Percent_Expressed,color=Count), alpha=1) +
scale_color_continuous(limits=c(0, 35)) + scale_size_continuous(range=c(1,7),limits=c(0,60), breaks=seq(0, 100, by=20))
plot+scale_color_gradient(low="blue", high="red")
violin_data<-as.data.frame(cbind(a,as.vector(means),rep(c(unique(finalCluster)),16),c(as.vector(perExprd))))
colnames(violin_data)<-c("Gene","Count","Cluster","Percent_Expressed")
violin_data$Count<-as.numeric(violin_data$Count)
violin_data$Percent_Expressed<-as.numeric(violin_data$Percent_Expressed)
colfunc <- colorRampPalette(c("red", "blue"))
violin_data$Gene <- factor(violin_data$Gene, levels = unique(violin_data$Gene))
plot<-ggplot(violin_data, aes(Gene, Cluster)) +
geom_point(aes(size = Percent_Expressed,color=Count), alpha=1) +
scale_color_continuous(limits=c(0, 35)) + scale_size_continuous(range=c(1,7),limits=c(0,60), breaks=seq(0, 100, by=20))
plot+scale_color_gradient(low="blue", high="red")
table(finalCluster)
table(violin_data)
head(violin_data)
unique(finalCluster)
violin_data$Cluster <- factor(violin_data$Cluster, levels = unique(violin_data$Cluster))
plot<-ggplot(violin_data, aes(Gene, Cluster)) +
geom_point(aes(size = Percent_Expressed,color=Count), alpha=1) +
scale_color_continuous(limits=c(0, 35)) + scale_size_continuous(range=c(1,7),limits=c(0,60), breaks=seq(0, 100, by=20))
plot+scale_color_gradient(low="blue", high="red")
mean
cluster
i
heatmap.2(as.matrix(log2(ExprM.RawCounts.filter+.1))[ind,c(which(finalCluster==1),which(finalCluster==2),which(finalCluster==3),which(finalCluster==4))],trace="none",col=bluered(50),ColSideColors=mycols[c(rep(1,table(finalCluster)[1]),rep(2,table(finalCluster)[2]),rep(3,table(finalCluster)[3]),rep(4,table(finalCluster)[4]))],dendrogram="none",Rowv = FALSE, Colv = FALSE,tracecol="NA")
Rtsne_map_G<-read.table(paste("results/", exprimentID,"_Rtnse_Gini_coord2.csv", sep=""), sep=",")
Rtsne_map_F<-read.table(paste("results/", exprimentID,"_Rtnse_Fano_coord2.csv", sep=""), sep=",")
load(file=paste("results/", exprimentID,"_FinalClustering.RData",sep=""))
p1<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_G[,1],col=as.factor(finalCluster)))+geom_point(size=0,alpha=0.6)+theme_classic()+
scale_color_manual(values=mycols)
p1
p1<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_G[,1],col=as.factor(finalCluster)))+geom_point(size=0,alpha=0.6)+theme_classic()+
scale_color_manual(values=mycols)+labs(x=""Dimension_1_Fano", y="Dimension_1_Gini")
p1<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_G[,1],col=as.factor(finalCluster)))+geom_point(size=0,alpha=0.6)+theme_classic()+
scale_color_manual(values=mycols)+labs(x="Dimension_1_Fano", y="Dimension_1_Gini")
p1<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_G[,1],col=as.factor(finalCluster)))+geom_point(size=0.5,alpha=0.6)+theme_classic()+
scale_color_manual(values=mycols)+labs(x="Dimension_1_Fano", y="Dimension_1_Gini")
p1<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_G[,1],col=as.factor(finalCluster)))+geom_point(size=2,alpha=0.6)+theme_classic()+
scale_color_manual(values=mycols)+labs(x="Dimension_1_Fano", y="Dimension_1_Gini")
p1
p1<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_G[,1],col=as.factor(finalCluster)))+geom_point(size=1,alpha=0.6)+theme_classic()+
scale_color_manual(values=mycols)+labs(x="Dimension_1_Fano", y="Dimension_1_Gini")
p1
p1<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_G[,1],col=as.factor(finalCluster)))+geom_point(size=1,alpha=0.8)+theme_classic()+
scale_color_manual(values=mycols)+labs(x="Dimension_1_Fano", y="Dimension_1_Gini")
p1
p1<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_G[,1],col=as.factor(finalCluster)))+geom_point(size=1,alpha=0.8)+theme_classic()+
scale_color_manual(values=mycols)+labs(x="Dimension_1_Fano", y="Dimension_1_Gini")
p2<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_G[,2],col=as.factor(finalCluster)))+geom_point(size=1,alpha=0.8)+theme_classic()+
scale_color_manual(values=mycols)+labs(x="Dimension_1_Fano", y="Dimension_2_Gini")
p3<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,2],Rtsne_map_G[,1],col=as.factor(finalCluster)))+geom_point(size=1,alpha=0.8)+theme_classic()+
scale_color_manual(values=mycols)+labs(x="Dimension_2_Fano", y="Dimension_1_Gini")
p4<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,2],Rtsne_map_G[,2],col=as.factor(finalCluster)))+geom_point(size=1,alpha=0.8)+theme_classic()+
scale_color_manual(values=mycols)+labs(x="Dimension_2_Fano", y="Dimension_2_Gini")
p5<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_F[,2],col=as.factor(finalCluster)))+geom_point(size=1,alpha=0.8)+theme_classic()+
scale_color_manual(values=mycols)+labs(x="Dimension_1_Fano", y="Dimension_2_Fano")
p6<-ggplot(Rtsne_map_F,aes(Rtsne_map_G[,1],Rtsne_map_G[,2],col=as.factor(finalCluster)))+geom_point(size=1,alpha=0.8)+theme_classic()+
scale_color_manual(values=mycols)+labs(x="Dimension_1_Gini", y="Dimension_2_Gini")
grid.arrange(p1,p2,p3,p4,p5,p6,ncol=2)
Clusters<-as.factor(finalCluster)
Clusters<-as.factor(finalCluster)
p1<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_G[,1],col=Clusters))+geom_point(size=1,alpha=0.8)+theme_classic()+
scale_color_manual(values=mycols)+labs(x="Dimension_1_Fano", y="Dimension_1_Gini")
p2<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_G[,2],col=Clusters))+geom_point(size=1,alpha=0.8)+theme_classic()+
scale_color_manual(values=mycols)+labs(x="Dimension_1_Fano", y="Dimension_2_Gini")
p3<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,2],Rtsne_map_G[,1],col=Clusters))+geom_point(size=1,alpha=0.8)+theme_classic()+
scale_color_manual(values=mycols)+labs(x="Dimension_2_Fano", y="Dimension_1_Gini")
p4<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,2],Rtsne_map_G[,2],col=Clusters))+geom_point(size=1,alpha=0.8)+theme_classic()+
scale_color_manual(values=mycols)+labs(x="Dimension_2_Fano", y="Dimension_2_Gini")
p5<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_F[,2],col=Clusters))+geom_point(size=1,alpha=0.8)+theme_classic()+
scale_color_manual(values=mycols)+labs(x="Dimension_1_Fano", y="Dimension_2_Fano")
p6<-ggplot(Rtsne_map_F,aes(Rtsne_map_G[,1],Rtsne_map_G[,2],col=Clusters))+geom_point(size=1,alpha=0.8)+theme_classic()+
scale_color_manual(values=mycols)+labs(x="Dimension_1_Gini", y="Dimension_2_Gini")
grid.arrange(p1,p2,p3,p4,p5,p6,ncol=2)
Clusters<-as.factor(finalCluster)
p1<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_G[,1],col=Clusters))+geom_point(size=1,alpha=0.8)+theme_classic()+
scale_color_manual(values=mycols)+labs(x="Fano 1", y="Gini 1")
p2<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_G[,2],col=Clusters))+geom_point(size=1,alpha=0.8)+theme_classic()+
scale_color_manual(values=mycols)+labs(x="Fano 1", y="Gini 2")
p3<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,2],Rtsne_map_G[,1],col=Clusters))+geom_point(size=1,alpha=0.8)+theme_classic()+
scale_color_manual(values=mycols)+labs(x="Fano 2", y="Gini 1")
p4<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,2],Rtsne_map_G[,2],col=Clusters))+geom_point(size=1,alpha=0.8)+theme_classic()+
scale_color_manual(values=mycols)+labs(x="Fano 2", y="Gini 2")
p5<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_F[,2],col=Clusters))+geom_point(size=1,alpha=0.8)+theme_classic()+
scale_color_manual(values=mycols)+labs(x="Fano 1", y="Fano 2")
p6<-ggplot(Rtsne_map_F,aes(Rtsne_map_G[,1],Rtsne_map_G[,2],col=Clusters))+geom_point(size=1,alpha=0.8)+theme_classic()+
scale_color_manual(values=mycols)+labs(x="Gini 1", y="Gini 2")
grid.arrange(p1,p2,p3,p4,p5,p6,ncol=2)
p1<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_G[,1],col=Clusters))+geom_point(size=1,alpha=0.8)+theme(legend.title=element_text(size=12))+
scale_color_manual(values=mycols)+labs(x="Fano 1", y="Gini 1")
grid.arrange(p1,p2,p3,p4,p5,p6,ncol=2)
p1<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_G[,1],col=Clusters))+geom_point(size=1,alpha=0.8)+theme(legend.title=element_text(size=20))+
scale_color_manual(values=mycols)+labs(x="Fano 1", y="Gini 1")
grid.arrange(p1,p2,p3,p4,p5,p6,ncol=2)
p1<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_G[,1],col=Clusters))+geom_point(size=1,alpha=0.8)+theme(legend.title=element_text(size=12),axis.text=element_text(size=14),axis.title=element_text(size=15))+
scale_color_manual(values=mycols)+labs(x="Fano 1", y="Gini 1")
grid.arrange(p1,p2,p3,p4,p5,p6,ncol=2)
p1<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_G[,1],col=Clusters))+geom_point(size=1,alpha=0.8)+theme_classic()+
scale_color_manual(values=mycols)+labs(x="Fano 1", y="Gini 1")
p1<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_G[,1],col=Clusters))+geom_point(size=1,alpha=0.8)+theme_classic()+
scale_color_manual(values=mycols)+labs(x="Fano 1", y="Gini 1")+ guides(colour = guide_legend(override.aes = list(size=10)))
grid.arrange(p1,p2,p3,p4,p5,p6,ncol=2)
p1<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_G[,1],col=Clusters))+geom_point(size=1,alpha=0.8)+theme_classic()+
scale_color_manual(values=mycols)+labs(x="Fano 1", y="Gini 1")+ guides(colour = guide_legend(override.aes = list(size=2)))
grid.arrange(p1,p2,p3,p4,p5,p6,ncol=2)
p2<-ggplot(data=as.data.frame(barData4), aes(Clustering,fill=as.factor(Standard))) +
geom_bar(stat="count")+labs(x="GiniClust2 Clusters",y="Count",fill="RaceID2 Clusters")+ coord_flip()
p2
load(file="/Users/Daphne/Documents/Yuan/GiniClust2/Proj/inDrop_day4/results/d4_FinalClustering.RData")
load(file="/Users/Daphne/Documents/Yuan/GiniClust2/Proj/inDrop_day4/results/d4RaceID2_clusters_k.RData")
barData4<-cbind(finalCluster[-1],RaceID2_clusters)
colnames(barData4)<-c("Clustering","Standard")
p2<-ggplot(data=as.data.frame(barData4), aes(Clustering,fill=as.factor(Standard))) +
geom_bar(stat="count")+labs(x="GiniClust2 Clusters",y="Count",fill="RaceID2 Clusters")+ coord_flip()
p2
head(barData4)
barDataRare<-barData4[c(which(barData4$Standard==1),which(barData4$Standard==1)),]
barDataRare<-barData4[c(which(barData4[,2]==1),which(barData4[,2]==1)),]
barDataRare
table(barData4[,2])
table(barData4[,1])
barDataRare<-barData4[c(which(barData4[,1]==1),which(barData4[,1]==2)),]
barDataRare
barDataCommon<-barData4[-c(which(barData4[,1]==1),which(barData4[,1]==2)),]
p2<-ggplot(data=as.data.frame(barDataCommon), aes(Clustering,fill=as.factor(Standard))) +
geom_bar(stat="count")+labs(x="GiniClust2 Clusters",y="Count",fill="RaceID2 Clusters")+ coord_flip()
p2
p2<-ggplot(data=as.data.frame(barDataRare), aes(Clustering,fill=as.factor(Standard))) +
geom_bar(stat="count")+labs(x="GiniClust2 Clusters",y="Count",fill="RaceID2 Clusters")+ coord_flip()
p2
p2<-ggplot(data=as.data.frame(barDataCommon), aes(Clustering,fill=as.factor(Standard))) +
geom_bar(stat="count")+labs(x="GiniClust2 Clusters",y="Count",fill="RaceID2 Clusters")+ coord_flip()
p2
p2<-ggplot(data=as.data.frame(barDataCommon), aes(Clustering,fill=as.factor(Standard))) +
geom_bar(stat="count")+labs(x="GiniClust2 Clusters",y="Count",fill="RaceID2 Clusters")+ coord_flip()
p2
p2<-ggplot(data=as.data.frame(barDataCommon), aes(as.factor(Clustering),fill=as.factor(Standard))) +
geom_bar(stat="count")+labs(x="GiniClust2 Clusters",y="Count",fill="RaceID2 Clusters")+ coord_flip()
p2
p3<-ggplot(data=as.data.frame(barDataRare), aes(as.factor(Clustering),fill=as.factor(Standard))) +
geom_bar(stat="count")+labs(x="GiniClust2 Clusters",y="Count",fill="RaceID2 Clusters")+ coord_flip()
p3
p2<-ggplot(data=as.data.frame(barDataCommon), aes(as.factor(Clustering),fill=as.factor(Standard))) +
geom_bar(stat="count")+labs(x="GiniClust2 Clusters",y="Count",fill="RaceID2 Clusters")+ coord_flip()
p2
p3<-ggplot(data=as.data.frame(barDataRare), aes(as.factor(Clustering),fill=as.factor(Standard))) +
geom_bar(stat="count")+labs(x="GiniClust2 Clusters",y="Count",fill="RaceID2 Clusters")+ coord_flip()
p3
p2<-ggplot(data=as.data.frame(barDataCommon), aes(as.factor(Clustering),fill=as.factor(Standard))) +
geom_bar(stat="count")+labs(x="GiniClust2 Clusters",y="Count",fill="RaceID2 Clusters")+ coord_flip()
p2
install.packages("optpart")
library(optpart)
confus(finalCluster,RaceID2_clusters)
finalCluster
RaceID2_clusters
confus(finalCluster,as.vector(RaceID2_clusters))
confus(as.vector(finalCluster),as.vector(RaceID2_clusters))
finalCluster
confus(as.vector(finalCluster),as.vector(RaceID2_clusters))
install.packages("caret")
library(caret)
confusionMatrix(as.vector(finalCluster),as.vector(RaceID2_clusters))
library(caret)
detach("package:optpart", unload=TRUE)
library(caret)
install.packages("caret")
library(caret)
detach("package:clue", unload=TRUE)
library("clue", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
detach("package:GraphAT", unload=TRUE)
detach("package:MAST", unload=TRUE)
detach("package:mclust", unload=TRUE)
detach("package:pheatmap", unload=TRUE)
library(caret)
R_MAX_NUM_DLLS=150
library(caret)
Variable name = R_MAX_NUM_DLL
Value = 1000
base::getLoadedDLLs()
detach("package:permute", unload=TRUE)
detach("package:plotrix", unload=TRUE)
detach("package:plyr", unload=TRUE)
detach("package:proxy", unload=TRUE)
detach("package:R.methodsS3", unload=TRUE)
detach("package:R.oo", unload=TRUE)
detach("package:R.utils", unload=TRUE)
detach("package:RANN", unload=TRUE)
detach("package:RColorBrewer", unload=TRUE)
detach("package:reshape", unload=TRUE)
library(caret)
