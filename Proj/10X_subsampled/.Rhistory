k                    = 2
gap_statistic        = FALSE
K.max                = 10
automatic_eps        = FALSE
automatic_minpts     = TRUE
workdir              = "/Users/Daphne/Documents/Yuan/GiniClust2_V1/Proj/inDrop_day4/"
exprimentID          = "d4"                              # experiment or data set ID
setwd(workdir)
source(paste(Rfundir,"GiniClust2_fitting.R",sep=""))
source(paste(Rfundir,"GiniClust2_Gini_clustering.R",sep=""))
table(P_G)
source(paste(Rfundir,"GiniClust2_Gini_tSNE.R",sep=""))
#Fano-based clustering steps
source(paste(Rfundir,"GiniClust2_Fano_clustering.R",sep=""))
table(P_F)
source(paste(Rfundir,"GiniClust2_Fano_tSNE.R",sep=""))
#weighted consensus clustering
source(paste(Rfundir,"GiniClust2_consensus_clustering.R",sep=""))
table(finalCluster)
#final analyses
source(paste(Rfundir,"GiniClust2_DE.R",sep=""))
workdir              = "/Users/Daphne/Documents/Yuan/GiniClust2_V1/Proj/inDrop_day4/"  # where you put the data and results
#dataset specific parameters:
workdir              = "/Users/Daphne/Documents/Yuan/GiniClust2_V1/Proj/inDrop_day4/"  # where you put the data and results
#GeneList.final       = Genelist.top_pvalue
exprimentID          = "d4"   #fixed parameters for all datasets:
minCellNum           = 3                                                # filtering, for at least expressed in how many cells
minGeneNum           = 2000                                             # filtering, for at least expressed in how many genes
expressed_cutoff     = 1                                                # filtering, for raw counts
gini.bi              = 0                                                # fitting, default is 0, for qPCR data, set as 1.
log2.expr.cutoffl    = 0                                                # cutoff for range of gene expression
log2.expr.cutoffh    = 20                                               # cutoff for range of gene expression
Gini.pvalue_cutoff   = 0.0001                                           # fiting, Pvalue, control how many genes used.
Norm.Gini.cutoff     = 1                                                # fiting, NomGini, control how many genes used, 1 means not used.
span                 = 0.9                                              # parameter for LOESS fitting
outlier_remove       = 0.75                                             # parameter for LOESS fitting
GeneList             = 1                                                # parameter for clustering, 1 means using pvalue, 0 means using HighNormGini
Gamma                = 0.9                                             # parameter for clustering
diff.cutoff          = 1                                                # MAST analysis, filter genes that don't have high log2_foldchange to reduce gene num
lr.p_value_cutoff    = 1e-5                                             # MAST analysis, pvalue cutoff to identify differential expressed gene
CountsForNormalized  = 100000
Rfundir              = "/Users/Daphne/Documents/Yuan/GiniClust2_V1/Rfunction/"
#dataset-specific parameters:
eps                  = 0.34                                              # parameter for DBSCAN
MinPts               = 3                                                # parameter for DBSCAN
mycols               = c("grey50","greenyellow","red","blue","black","orange")   # color setting for tSNE plot
diff.cutoff          = 1                                                # MAST analysis, filter genes that don't have high log2_foldchange to reduce gene num
lr.p_value_cutoff    = 1e-5                                             # MAST analysis, pvalue cutoff to identify differential expressed gene
perplexity_G         = 30
perplexity_F         = 30
max_iter_G           = 1000
max_iter_F           = 1000
k                    = 2
gap_statistic        = FALSE
K.max                = 10
automatic_eps        = FALSE
automatic_minpts     = TRUE
workdir              = "/Users/Daphne/Documents/Yuan/GiniClust2_V1/Proj/inDrop_day4/"
exprimentID          = "d4"                              # experiment or data set ID
setwd(workdir)
#load packages and functions
source(paste(Rfundir,"GiniClust2_packages.R",sep=""))
source(paste(Rfundir,"GiniClust2_functions.R",sep=""))
#Pre Processing the data
source(paste(Rfundir,"PreProcess_for_inDrop_day4.R",sep=""))
source(paste(Rfundir,"GiniClust2_filtering_RawCounts.R",sep=""))
#Gini-based clustering steps
source(paste(Rfundir,"GiniClust2_fitting.R",sep=""))
source(paste(Rfundir,"GiniClust2_Gini_clustering.R",sep=""))
table(P_G)
source(paste(Rfundir,"GiniClust2_Gini_tSNE.R",sep=""))
#Fano-based clustering steps
source(paste(Rfundir,"GiniClust2_Fano_clustering.R",sep=""))
table(P_F)
source(paste(Rfundir,"GiniClust2_Fano_tSNE.R",sep=""))
#weighted consensus clustering
source(paste(Rfundir,"GiniClust2_consensus_clustering.R",sep=""))
table(finalCluster)
#final analyses
source(paste(Rfundir,"GiniClust2_DE.R",sep=""))
source(paste(Rfundir,"GiniClust2_figures.R",sep=""))
exprimentID
workdir              = "/Users/Daphne/Documents/Yuan/GiniClust2/Proj/simu/"
Rtsne_map_G<-read.table(paste("results/", exprimentID,"_Rtnse_Gini_coord2.csv", sep=""), sep=",")
Rtsne_map_F<-read.table(paste("results/", exprimentID,"_Rtnse_Fano_coord2.csv", sep=""), sep=",")
load(file=paste("results/", exprimentID,"_FinalClustering.RData",sep=""))
p1<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_G[,1],col=as.factor(finalCluster)))+geom_point(size=0,alpha=0.6)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Fano 1", y="Gini 1")+ guides(colour = guide_legend(override.aes = list(size=2)))
p2<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_G[,2],col=as.factor(finalCluster)))+geom_point(size=0,alpha=0.6)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Fano 1", y="Gini 2")+ guides(colour = guide_legend(override.aes = list(size=2)))
p3<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,2],Rtsne_map_G[,1],col=as.factor(finalCluster)))+geom_point(size=0,alpha=0.6)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Fano 2", y="Gini 1")+ guides(colour = guide_legend(override.aes = list(size=2)))
p4<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,2],Rtsne_map_G[,2],col=as.factor(finalCluster)))+geom_point(size=0,alpha=0.6)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Fano 2", y="Gini 2")+ guides(colour = guide_legend(override.aes = list(size=2)))
p5<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_F[,2],col=as.factor(finalCluster)))+geom_point(size=0,alpha=0.6)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Fano 1", y="Fano 2")+ guides(colour = guide_legend(override.aes = list(size=2)))
p6<-ggplot(Rtsne_map_F,aes(Rtsne_map_G[,1],Rtsne_map_G[,2],col=as.factor(finalCluster)))+geom_point(size=0,alpha=0.6)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Gini 1", y="Gini 2")+ guides(colour = guide_legend(override.aes = list(size=2)))
g<-grid.arrange(p1,p2,p3,p4,p5,p6,ncol=2)
exprimentID="simu"
Rtsne_map_G<-read.table(paste("results/", exprimentID,"_Rtnse_Gini_coord2.csv", sep=""), sep=",")
workdir              = "/Users/Daphne/Documents/Yuan/GiniClust2/Proj/Simulation/"
Rtsne_map_G<-read.table(paste("results/", exprimentID,"_Rtnse_Gini_coord2.csv", sep=""), sep=",")
setwd(workdir)
Rtsne_map_G<-read.table(paste("results/", exprimentID,"_Rtnse_Gini_coord2.csv", sep=""), sep=",")
Rtsne_map_F<-read.table(paste("results/", exprimentID,"_Rtnse_Fano_coord2.csv", sep=""), sep=",")
p1<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_G[,1],col=as.factor(finalCluster)))+geom_point(size=0,alpha=0.6)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Fano 1", y="Gini 1")+ guides(colour = guide_legend(override.aes = list(size=2)))
p2<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_G[,2],col=as.factor(finalCluster)))+geom_point(size=0,alpha=0.6)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Fano 1", y="Gini 2")+ guides(colour = guide_legend(override.aes = list(size=2)))
p3<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,2],Rtsne_map_G[,1],col=as.factor(finalCluster)))+geom_point(size=0,alpha=0.6)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Fano 2", y="Gini 1")+ guides(colour = guide_legend(override.aes = list(size=2)))
p4<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,2],Rtsne_map_G[,2],col=as.factor(finalCluster)))+geom_point(size=0,alpha=0.6)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Fano 2", y="Gini 2")+ guides(colour = guide_legend(override.aes = list(size=2)))
p5<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_F[,2],col=as.factor(finalCluster)))+geom_point(size=0,alpha=0.6)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Fano 1", y="Fano 2")+ guides(colour = guide_legend(override.aes = list(size=2)))
p6<-ggplot(Rtsne_map_F,aes(Rtsne_map_G[,1],Rtsne_map_G[,2],col=as.factor(finalCluster)))+geom_point(size=0,alpha=0.6)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Gini 1", y="Gini 2")+ guides(colour = guide_legend(override.aes = list(size=2)))
g<-grid.arrange(p1,p2,p3,p4,p5,p6,ncol=2)
p1
head(Rtsne_map_F)
load(file=paste("results/", exprimentID,"_FinalClustering.RData",sep=""))
p1<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_G[,1],col=as.factor(finalCluster)))+geom_point(size=0,alpha=0.6)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Fano 1", y="Gini 1")+ guides(colour = guide_legend(override.aes = list(size=2)))
p2<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_G[,2],col=as.factor(finalCluster)))+geom_point(size=0,alpha=0.6)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Fano 1", y="Gini 2")+ guides(colour = guide_legend(override.aes = list(size=2)))
p3<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,2],Rtsne_map_G[,1],col=as.factor(finalCluster)))+geom_point(size=0,alpha=0.6)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Fano 2", y="Gini 1")+ guides(colour = guide_legend(override.aes = list(size=2)))
p4<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,2],Rtsne_map_G[,2],col=as.factor(finalCluster)))+geom_point(size=0,alpha=0.6)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Fano 2", y="Gini 2")+ guides(colour = guide_legend(override.aes = list(size=2)))
p5<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_F[,2],col=as.factor(finalCluster)))+geom_point(size=0,alpha=0.6)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Fano 1", y="Fano 2")+ guides(colour = guide_legend(override.aes = list(size=2)))
p6<-ggplot(Rtsne_map_F,aes(Rtsne_map_G[,1],Rtsne_map_G[,2],col=as.factor(finalCluster)))+geom_point(size=0,alpha=0.6)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Gini 1", y="Gini 2")+ guides(colour = guide_legend(override.aes = list(size=2)))
g<-grid.arrange(p1,p2,p3,p4,p5,p6,ncol=2)
#fixed parameters for all datasets:
minCellNum           = 3                                                # filtering, for at least expressed in how many cells
minGeneNum           = 2000                                             # filtering, for at least expressed in how many genes
expressed_cutoff     = 1                                                # filtering, for raw counts
gini.bi              = 0                                                # fitting, default is 0, for qPCR data, set as 1.
log2.expr.cutoffl    = 0                                                # cutoff for range of gene expression
log2.expr.cutoffh    = 20                                               # cutoff for range of gene expression
Gini.pvalue_cutoff   = 0.0001                                           # fiting, Pvalue, control how many genes used.
Norm.Gini.cutoff     = 1                                                # fiting, NomGini, control how many genes used, 1 means not used.
span                 = 0.9                                              # parameter for LOESS fitting
outlier_remove       = 0.75                                             # parameter for LOESS fitting
GeneList             = 1                                                # parameter for clustering, 1 means using pvalue, 0 means using HighNormGini
Gamma                = 0.99                                             # parameter for clustering
diff.cutoff          = 1                                                # MAST analysis, filter genes that don't have high log2_foldchange to reduce gene num
lr.p_value_cutoff    = 1e-5                                             # MAST analysis, pvalue cutoff to identify differential expressed gene
CountsForNormalized  = 100000
Rfundir              = "/Users/Daphne/Documents/Yuan/GiniClust2_V1/Rfunction/"
#dataset-specific parameters:
eps                  = 0.5                                              # parameter for DBSCAN
MinPts               = 3                                                # parameter for DBSCAN
diff.cutoff          = 1                                                # MAST analysis, filter genes that don't have high log2_foldchange to reduce gene num
lr.p_value_cutoff    = 1e-5                                             # MAST analysis, pvalue cutoff to identify differential expressed gene
perplexity_G         = 5
perplexity_F         = 30
max_iter_G           = 10000
max_iter_F           = 10000
k                    = 2
gap_statistic        = TRUE
K.max                = 10
automatic_eps        = TRUE
automatic_minpts     = TRUE
workdir              = "/Users/Daphne/Documents/Yuan/GiniClust2_V1/Proj/Simulation/"
exprimentID          = "simu"                              # experiment or data set ID
mycols               = c("grey50","greenyellow","red","blue","black","orange")   # color setting for tSNE plot
setwd(workdir)
load(file=paste("results/",exprimentID,"_Fano_distance.RData",sep=""))
load(file=paste("results/", exprimentID,"_FanoClustering.RData",sep=""))
ggplot(as.data.frame(Rtsne_map$Y),aes(Rtsne_map$Y[,1],Rtsne_map$Y[,2],col=as.factor(P_F)))+geom_point(size=0.5,alpha=0.6)+theme_classic()+
scale_color_manual(values=mycols,name="Fano Clusters")+labs(x="Fano 1", y="Fano 2")
Rtsne_map<-read.table(paste("results/", exprimentID,"_Rtnse_Fano_coord2.csv", sep=""), sep=",")
ggplot(as.data.frame(Rtsne_map$Y),aes(Rtsne_map$Y[,1],Rtsne_map$Y[,2],col=as.factor(P_F)))+geom_point(size=0.5,alpha=0.6)+theme_classic()+
scale_color_manual(values=mycols,name="Fano Clusters")+labs(x="Fano 1", y="Fano 2")
head(Rtsne_map)
dim(Rtsne_map)
ggplot(as.data.frame(Rtsne_map$Y),aes(Rtsne_map$Y[,1],Rtsne_map$Y[,2],col=as.factor(P_F)))+geom_point(size=0.5,alpha=0.6)+theme_classic()+
scale_color_manual(values=mycols,name="Fano Clusters")+labs(x="Fano 1", y="Fano 2")
length(P_F)
ggplot(as.data.frame(Rtsne_map$Y),aes(Rtsne_map$Y[,1],Rtsne_map$Y[,2],col=as.factor(P_F)))+geom_point(size=0.5,alpha=0.6)+theme_classic()+
scale_color_manual(values=mycols,name="Fano Clusters")+labs(x="Fano 1", y="Fano 2")
ggplot(as.data.frame(Rtsne_map),aes(Rtsne_map[,1],Rtsne_map[,2],col=as.factor(P_F)))+geom_point(size=0.5,alpha=0.6)+theme_classic()+
scale_color_manual(values=mycols,name="Fano Clusters")+labs(x="Fano 1", y="Fano 2")
ggsave(paste("figures/Figures_", exprimentID, "_perplexity_", perplexity_F, "_tsne_plot_P_F.pdf", sep=""))
Rtsne_map_G<-read.table(paste("results/", exprimentID,"_Rtnse_Gini_coord2.csv", sep=""), sep=",")
Rtsne_map_F<-read.table(paste("results/", exprimentID,"_Rtnse_Fano_coord2.csv", sep=""), sep=",")
#load final clustering ids
load(file=paste("results/", exprimentID,"_FinalClustering.RData",sep=""))
#plot visualizations
if (length(finalCluster)>1000){
p1<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_G[,1],col=as.factor(finalCluster)))+geom_point(size=0,alpha=0.6)+theme_classic()+
scale_color_manual(values=mycols)
p2<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_G[,2],col=as.factor(finalCluster)))+geom_point(size=0,alpha=0.6)+theme_classic()+
scale_color_manual(values=mycols)
p3<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,2],Rtsne_map_G[,1],col=as.factor(finalCluster)))+geom_point(size=0,alpha=0.6)+theme_classic()+
scale_color_manual(values=mycols)
p4<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,2],Rtsne_map_G[,2],col=as.factor(finalCluster)))+geom_point(size=0,alpha=0.6)+theme_classic()+
scale_color_manual(values=mycols)
p5<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_F[,2],col=as.factor(finalCluster)))+geom_point(size=0,alpha=0.6)+theme_classic()+
scale_color_manual(values=mycols)
p6<-ggplot(Rtsne_map_F,aes(Rtsne_map_G[,1],Rtsne_map_G[,2],col=as.factor(finalCluster)))+geom_point(size=0,alpha=0.6)+theme_classic()+
scale_color_manual(values=mycols)
grid.arrange(p1,p2,p3,p4,p5,p6,ncol=2)
ggsave(paste("figures/Figures_", exprimentID, "_tsne_plot_combined.pdf", sep=""))
} else{
p1<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_G[,1],col=as.factor(finalCluster)))+geom_point(size=1,alpha=0.8)+theme_classic()+
scale_color_manual(values=mycols)
p2<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_G[,2],col=as.factor(finalCluster)))+geom_point(size=1,alpha=0.8)+theme_classic()+
scale_color_manual(values=mycols)
p3<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,2],Rtsne_map_G[,1],col=as.factor(finalCluster)))+geom_point(size=1,alpha=0.8)+theme_classic()+
scale_color_manual(values=mycols)
p4<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,2],Rtsne_map_G[,2],col=as.factor(finalCluster)))+geom_point(size=1,alpha=0.8)+theme_classic()+
scale_color_manual(values=mycols)
p5<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_F[,2],col=as.factor(finalCluster)))+geom_point(size=1,alpha=0.8)+theme_classic()+
scale_color_manual(values=mycols)
p6<-ggplot(Rtsne_map_F,aes(Rtsne_map_G[,1],Rtsne_map_G[,2],col=as.factor(finalCluster)))+geom_point(size=1,alpha=0.8)+theme_classic()+
scale_color_manual(values=mycols)
grid.arrange(p1,p2,p3,p4,p5,p6,ncol=2)
ggsave(paste("figures/Figures_", exprimentID, "_tsne_plot_combined.pdf", sep=""))
}
#load Gini and Fano dimensions
Rtsne_map_G<-read.table(paste("results/", exprimentID,"_Rtnse_Gini_coord2.csv", sep=""), sep=",")
Rtsne_map_F<-read.table(paste("results/", exprimentID,"_Rtnse_Fano_coord2.csv", sep=""), sep=",")
#load final clustering ids
load(file=paste("results/", exprimentID,"_FinalClustering.RData",sep=""))
#plot visualizations
if (length(finalCluster)>1000){
p1<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_G[,1],col=as.factor(finalCluster)))+geom_point(size=0,alpha=0.6)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Fano 1", y="Gini 1")+ guides(colour = guide_legend(override.aes = list(size=2)))
p2<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_G[,2],col=as.factor(finalCluster)))+geom_point(size=0,alpha=0.6)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Fano 1", y="Gini 2")+ guides(colour = guide_legend(override.aes = list(size=2)))
p3<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,2],Rtsne_map_G[,1],col=as.factor(finalCluster)))+geom_point(size=0,alpha=0.6)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Fano 2", y="Gini 1")+ guides(colour = guide_legend(override.aes = list(size=2)))
p4<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,2],Rtsne_map_G[,2],col=as.factor(finalCluster)))+geom_point(size=0,alpha=0.6)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Fano 2", y="Gini 2")+ guides(colour = guide_legend(override.aes = list(size=2)))
p5<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_F[,2],col=as.factor(finalCluster)))+geom_point(size=0,alpha=0.6)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Fano 1", y="Fano 2")+ guides(colour = guide_legend(override.aes = list(size=2)))
p6<-ggplot(Rtsne_map_F,aes(Rtsne_map_G[,1],Rtsne_map_G[,2],col=as.factor(finalCluster)))+geom_point(size=0,alpha=0.6)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Gini 1", y="Gini 2")+ guides(colour = guide_legend(override.aes = list(size=2)))
g<-grid.arrange(p1,p2,p3,p4,p5,p6,ncol=2)
ggsave(paste("figures/Figures_", exprimentID, "_tsne_plot_combined.pdf", sep=""),g)
} else{
p1<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_G[,1],col=as.factor(finalCluster)))+geom_point(size=1,alpha=0.8)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Fano 1", y="Gini 1")+ guides(colour = guide_legend(override.aes = list(size=2)))
p2<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_G[,2],col=as.factor(finalCluster)))+geom_point(size=1,alpha=0.8)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Fano 1", y="Gini 2")+ guides(colour = guide_legend(override.aes = list(size=2)))
p3<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,2],Rtsne_map_G[,1],col=as.factor(finalCluster)))+geom_point(size=1,alpha=0.8)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Fano 2", y="Gini 1")+ guides(colour = guide_legend(override.aes = list(size=2)))
p4<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,2],Rtsne_map_G[,2],col=as.factor(finalCluster)))+geom_point(size=1,alpha=0.8)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Fano 2", y="Gini 2")+ guides(colour = guide_legend(override.aes = list(size=2)))
p5<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_F[,2],col=as.factor(finalCluster)))+geom_point(size=1,alpha=0.8)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Fano 1", y="Fano 2")+ guides(colour = guide_legend(override.aes = list(size=2)))
p6<-ggplot(Rtsne_map_F,aes(Rtsne_map_G[,1],Rtsne_map_G[,2],col=as.factor(finalCluster)))+geom_point(size=1,alpha=0.8)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Gini 1", y="Gini 2")+ guides(colour = guide_legend(override.aes = list(size=2)))
g<-grid.arrange(p1,p2,p3,p4,p5,p6,ncol=2)
ggsave(paste("figures/Figures_", exprimentID, "_tsne_plot_combined.pdf", sep=""),g)
}
#fixed parameters for all dataset:
minCellNum           = 3                                                # filtering, for at least expressed in how many cells
minGeneNum           = 2000                                             # filtering, for at least expressed in how many genes
expressed_cutoff     = 1                                                # filtering, for raw counts
gini.bi              = 0                                                # fitting, default is 0, for qPCR data, set as 1.
log2.expr.cutoffl    = 0                                                # cutoff for range of gene expression
log2.expr.cutoffh    = 20                                               # cutoff for range of gene expression
Gini.pvalue_cutoff   = 0.0001                                           # fiting, Pvalue, control how many gene finally used.
Norm.Gini.cutoff     = 1                                                # fiting, NomGini, control how many gene finally used, 1 means not used.
span                 = 0.9                                              # parameter for LOESS fitting
outlier_remove       = 0.75                                             # parameter for LOESS fitting
GeneList             = 1                                                # parameter for clustering, 1 means using pvalue, 0 means using HighNormGini
Gamma                = 0.9                                              # parameter for clustering
eps                  = 0.34                                              # parameter for DBSCAN
MinPts               = 3                                                # parameter for DBSCAN
mycols               = c("grey50","greenyellow","red","blue","black","pink","orange","yellow","cyan","green","darkgreen","brown","purple")   # color setting for tSNE plot
diff.cutoff          = 1                                                # MAST analysis, filter gene don't have high log2_foldchange to reduce gene num
lr.p_value_cutoff    = 1e-5                                             # MAST analysis, pvalue cutoff to identify differential expressed gene
CountsForNormalized  = 100000                                           # not used
rare_p               = 0.05                                             # propostion of cell number < this value will be considered as rare cell clusters.
perplexity           = 30
k                    = 2
gap_statistic        = FALSE
K.max                = 10
automatic_eps        = FALSE
automatic_minpts     = FALSE
Rfundir              = "/Users/Daphne/Documents/Yuan/GiniClust2/Rfunction/"
#dataset specific parameters:
workdir              = "/Users/Daphne/Documents/Yuan/GiniClust2/Proj/inDrop_day4/"  # where you put the data and results
#GeneList.final       = Genelist.top_pvalue
exprimentID          = "d4"
setwd(workdir)
Rtsne_map_G<-read.table(paste("results/", exprimentID,"_Rtnse_Gini_coord2.csv", sep=""), sep=",")
Rtsne_map_F<-read.table(paste("results/", exprimentID,"_Rtnse_Fano_coord2.csv", sep=""), sep=",")
#load final clustering ids
load(file=paste("results/", exprimentID,"_FinalClustering.RData",sep=""))
p1<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_G[,1],col=as.factor(finalCluster)))+geom_point(size=0,alpha=0.6)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Fano 1", y="Gini 1")+ guides(colour = guide_legend(override.aes = list(size=2)))
p2<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_G[,2],col=as.factor(finalCluster)))+geom_point(size=0,alpha=0.6)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Fano 1", y="Gini 2")+ guides(colour = guide_legend(override.aes = list(size=2)))
p3<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,2],Rtsne_map_G[,1],col=as.factor(finalCluster)))+geom_point(size=0,alpha=0.6)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Fano 2", y="Gini 1")+ guides(colour = guide_legend(override.aes = list(size=2)))
p4<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,2],Rtsne_map_G[,2],col=as.factor(finalCluster)))+geom_point(size=0,alpha=0.6)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Fano 2", y="Gini 2")+ guides(colour = guide_legend(override.aes = list(size=2)))
p5<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_F[,2],col=as.factor(finalCluster)))+geom_point(size=0,alpha=0.6)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Fano 1", y="Fano 2")+ guides(colour = guide_legend(override.aes = list(size=2)))
p6<-ggplot(Rtsne_map_F,aes(Rtsne_map_G[,1],Rtsne_map_G[,2],col=as.factor(finalCluster)))+geom_point(size=0,alpha=0.6)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Gini 1", y="Gini 2")+ guides(colour = guide_legend(override.aes = list(size=2)))
g<-grid.arrange(p1,p2,p3,p4,p5,p6,ncol=2)
p1<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_G[,1],col=as.factor(finalCluster)))+geom_point(size=1,alpha=0.8)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Fano 1", y="Gini 1")+ guides(colour = guide_legend(override.aes = list(size=2)))
p2<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_G[,2],col=as.factor(finalCluster)))+geom_point(size=1,alpha=0.8)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Fano 1", y="Gini 2")+ guides(colour = guide_legend(override.aes = list(size=2)))
p3<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,2],Rtsne_map_G[,1],col=as.factor(finalCluster)))+geom_point(size=1,alpha=0.8)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Fano 2", y="Gini 1")+ guides(colour = guide_legend(override.aes = list(size=2)))
p4<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,2],Rtsne_map_G[,2],col=as.factor(finalCluster)))+geom_point(size=1,alpha=0.8)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Fano 2", y="Gini 2")+ guides(colour = guide_legend(override.aes = list(size=2)))
p5<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_F[,2],col=as.factor(finalCluster)))+geom_point(size=1,alpha=0.8)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Fano 1", y="Fano 2")+ guides(colour = guide_legend(override.aes = list(size=2)))
p6<-ggplot(Rtsne_map_F,aes(Rtsne_map_G[,1],Rtsne_map_G[,2],col=as.factor(finalCluster)))+geom_point(size=1,alpha=0.8)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Gini 1", y="Gini 2")+ guides(colour = guide_legend(override.aes = list(size=2)))
g<-grid.arrange(p1,p2,p3,p4,p5,p6,ncol=2)
p1<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_G[,1],col=as.factor(finalCluster)))+geom_point(size=1,alpha=0.8)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Fano 1", y="Gini 1")+ guides(colour = guide_legend(override.aes = list(size=2)))
p2<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_G[,2],col=as.factor(finalCluster)))+geom_point(size=1,alpha=0.8)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Fano 1", y="Gini 2")+ guides(colour = guide_legend(override.aes = list(size=2)))
p3<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,2],Rtsne_map_G[,1],col=as.factor(finalCluster)))+geom_point(size=1,alpha=0.8)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Fano 2", y="Gini 1")+ guides(colour = guide_legend(override.aes = list(size=2)))
p4<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,2],Rtsne_map_G[,2],col=as.factor(finalCluster)))+geom_point(size=1,alpha=0.8)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Fano 2", y="Gini 2")+ guides(colour = guide_legend(override.aes = list(size=2)))
p5<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_F[,2],col=as.factor(finalCluster)))+geom_point(size=1,alpha=0.8)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Fano 1", y="Fano 2")+ guides(colour = guide_legend(override.aes = list(size=2)))
p6<-ggplot(Rtsne_map_F,aes(Rtsne_map_G[,1],Rtsne_map_G[,2],col=as.factor(finalCluster)))+geom_point(size=1,alpha=0.8)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Gini 1", y="Gini 2")+ guides(colour = guide_legend(override.aes = list(size=2)))
g<-grid.arrange(p1,p2,p3,p4,p5,p6,ncol=2)
ggsave(paste("figures/Figures_", exprimentID, "_tsne_plot_combined.pdf", sep=""),g)
load(file=paste("results/",exprimentID,"_Gini_distance.RData",sep=""))
load(file=paste("results/", exprimentID,"_GiniClustering.RData",sep=""))
ggplot(as.data.frame(Rtsne_map_G),aes(Rtsne_map_G[,1],Rtsne_map_G[,2],col=as.factor(P_G)))+geom_point(size=1,alpha=0.8)+theme_classic()+
scale_color_manual(values=mycols,name="Gini Clusters")+labs(x="Gini 1", y="Gini 2")
table(P_G)
#dataset specific parameters:
minCellNum           = 3                                                # filtering, for at least expressed in how many cells
minGeneNum           = 2000                                             # filtering, for at least expressed in how many genes
expressed_cutoff     = 1                                                # filtering, for raw counts
gini.bi              = 0                                                # fitting, default is 0, for qPCR data, set as 1.
log2.expr.cutoffl    = 0                                                # cutoff for range of gene expression
log2.expr.cutoffh    = 20                                               # cutoff for range of gene expression
Gini.pvalue_cutoff   = 0.0001                                           # fiting, Pvalue, control how many genes used.
Norm.Gini.cutoff     = 1                                                # fiting, NomGini, control how many genes used, 1 means not used.
span                 = 0.9                                              # parameter for LOESS fitting
outlier_remove       = 0.75                                             # parameter for LOESS fitting
GeneList             = 1                                                # parameter for clustering, 1 means using pvalue, 0 means using HighNormGini
Gamma                = 0.9                                             # parameter for clustering
diff.cutoff          = 1                                                # MAST analysis, filter genes that don't have high log2_foldchange to reduce gene num
lr.p_value_cutoff    = 1e-5                                             # MAST analysis, pvalue cutoff to identify differential expressed gene
CountsForNormalized  = 100000
Rfundir              = "/Users/Daphne/Documents/Yuan/GiniClust2_V1/Rfunction/"
#dataset-specific parameters:
eps                  = 0.34                                              # parameter for DBSCAN
MinPts               = 3                                                # parameter for DBSCAN
mycols               = c("grey50","greenyellow","red","blue","black","orange")   # color setting for tSNE plot
diff.cutoff          = 1                                                # MAST analysis, filter genes that don't have high log2_foldchange to reduce gene num
lr.p_value_cutoff    = 1e-5                                             # MAST analysis, pvalue cutoff to identify differential expressed gene
perplexity_G         = 30
perplexity_F         = 30
max_iter_G           = 1000
max_iter_F           = 1000
k                    = 2
gap_statistic        = FALSE
K.max                = 10
automatic_eps        = FALSE
automatic_minpts     = TRUE
workdir              = "/Users/Daphne/Documents/Yuan/GiniClust2_V1/Proj/inDrop_day4/"
exprimentID          = "d4"                              # experiment or data set ID
setwd(workdir)
source(paste(Rfundir,"GiniClust2_Gini_clustering.R",sep=""))
table(P_G)
ggplot(as.data.frame(Rtsne_map_G),aes(Rtsne_map_G[,1],Rtsne_map_G[,2],col=as.factor(P_G)))+geom_point(size=1,alpha=0.8)+theme_classic()+
scale_color_manual(values=mycols,name="Gini Clusters")+labs(x="Gini 1", y="Gini 2")
ggsave(paste("figures/Figures_", exprimentID, "_perplexity_", perplexity_G, "_tsne_plot_P_G.pdf", sep=""))
load(file=paste("results/", exprimentID,"_FanoClustering.RData",sep=""))
ggplot(as.data.frame(Rtsne_map_F),aes(Rtsne_map_F[,1],Rtsne_map_F[,2],col=as.factor(P_F)))+geom_point(size=1,alpha=0.8)+theme_classic()+
scale_color_manual(values=mycols,name="Fano Clusters")+labs(x="Gini 1", y="Gini 2")
ggplot(as.data.frame(Rtsne_map_F),aes(Rtsne_map_F[,1],Rtsne_map_F[,2],col=as.factor(P_F)))+geom_point(size=1,alpha=0.8)+theme_classic()+
scale_color_manual(values=mycols,name="Fano Clusters")+labs(x="Fano 1", y="Fano 2")
ggsave(paste("figures/Figures_", exprimentID, "_perplexity_", perplexity_F, "_tsne_plot_P_F.pdf", sep=""))
Rtsne_map_G<-read.table(paste("results/", exprimentID,"_Rtnse_Gini_coord2.csv", sep=""), sep=",")
Rtsne_map_F<-read.table(paste("results/", exprimentID,"_Rtnse_Fano_coord2.csv", sep=""), sep=",")
#load final clustering ids
load(file=paste("results/", exprimentID,"_FinalClustering.RData",sep=""))
#plot visualizations
if (length(finalCluster)>1000){
p1<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_G[,1],col=as.factor(finalCluster)))+geom_point(size=0,alpha=0.6)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Fano 1", y="Gini 1")+ guides(colour = guide_legend(override.aes = list(size=2)))
p2<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_G[,2],col=as.factor(finalCluster)))+geom_point(size=0,alpha=0.6)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Fano 1", y="Gini 2")+ guides(colour = guide_legend(override.aes = list(size=2)))
p3<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,2],Rtsne_map_G[,1],col=as.factor(finalCluster)))+geom_point(size=0,alpha=0.6)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Fano 2", y="Gini 1")+ guides(colour = guide_legend(override.aes = list(size=2)))
p4<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,2],Rtsne_map_G[,2],col=as.factor(finalCluster)))+geom_point(size=0,alpha=0.6)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Fano 2", y="Gini 2")+ guides(colour = guide_legend(override.aes = list(size=2)))
p5<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_F[,2],col=as.factor(finalCluster)))+geom_point(size=0,alpha=0.6)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Fano 1", y="Fano 2")+ guides(colour = guide_legend(override.aes = list(size=2)))
p6<-ggplot(Rtsne_map_F,aes(Rtsne_map_G[,1],Rtsne_map_G[,2],col=as.factor(finalCluster)))+geom_point(size=0,alpha=0.6)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Gini 1", y="Gini 2")+ guides(colour = guide_legend(override.aes = list(size=2)))
g<-grid.arrange(p1,p2,p3,p4,p5,p6,ncol=2)
ggsave(paste("figures/Figures_", exprimentID, "_tsne_plot_combined.pdf", sep=""),g)
} else{
p1<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_G[,1],col=as.factor(finalCluster)))+geom_point(size=1,alpha=0.8)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Fano 1", y="Gini 1")+ guides(colour = guide_legend(override.aes = list(size=2)))
p2<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_G[,2],col=as.factor(finalCluster)))+geom_point(size=1,alpha=0.8)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Fano 1", y="Gini 2")+ guides(colour = guide_legend(override.aes = list(size=2)))
p3<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,2],Rtsne_map_G[,1],col=as.factor(finalCluster)))+geom_point(size=1,alpha=0.8)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Fano 2", y="Gini 1")+ guides(colour = guide_legend(override.aes = list(size=2)))
p4<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,2],Rtsne_map_G[,2],col=as.factor(finalCluster)))+geom_point(size=1,alpha=0.8)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Fano 2", y="Gini 2")+ guides(colour = guide_legend(override.aes = list(size=2)))
p5<-ggplot(Rtsne_map_F,aes(Rtsne_map_F[,1],Rtsne_map_F[,2],col=as.factor(finalCluster)))+geom_point(size=1,alpha=0.8)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Fano 1", y="Fano 2")+ guides(colour = guide_legend(override.aes = list(size=2)))
p6<-ggplot(Rtsne_map_F,aes(Rtsne_map_G[,1],Rtsne_map_G[,2],col=as.factor(finalCluster)))+geom_point(size=1,alpha=0.8)+theme_classic()+
scale_color_manual(values=mycols,name="Final Clusters")+labs(x="Gini 1", y="Gini 2")+ guides(colour = guide_legend(override.aes = list(size=2)))
g<-grid.arrange(p1,p2,p3,p4,p5,p6,ncol=2)
ggsave(paste("figures/Figures_", exprimentID, "_tsne_plot_combined.pdf", sep=""),g)
}
source(paste(Rfundir,"GiniClust2_DE.R",sep=""))
source(paste(Rfundir,"GiniClust2_figures.R",sep=""))
if (!require("VennDiagram")) {
install.packages("VennDiagram", dependencies = TRUE, repos="http://cran.r-project.org")
}
library(VennDiagram)
#fixed parameters for GiniClust
minCellNum           = 3                                                # filtering, for at least expressed in how many cells
minGeneNum           = 2000                                             # filtering, for at least expressed in how many genes
expressed_cutoff     = 1                                                # filtering, for raw counts
gini.bi              = 0                                                # fitting, default is 0, for qPCR data, set as 1.
log2.expr.cutoffl    = 0                                                # cutoff for range of gene expression
log2.expr.cutoffh    = 20                                               # cutoff for range of gene expression
Gini.pvalue_cutoff   = 0.0001                                           # fiting, Pvalue, control how many gene finally used.
Norm.Gini.cutoff     = 1                                                # fiting, NomGini, control how many gene finally used, 1 means not used.
span                 = 0.9                                              # parameter for LOESS fitting
outlier_remove       = 0.75                                             # parameter for LOESS fitting
GeneList             = 1                                                # parameter for clustering, 1 means using pvalue, 0 means using HighNormGini
Gamma                = 0.9                                              # parameter for clustering
diff.cutoff          = 1                                                # MAST analysis, filter gene don't have high log2_foldchange to reduce gene num
lr.p_value_cutoff    = 1e-5                                             # MAST analysis, pvalue cutoff to identify differential expressed gene
CountsForNormalized  = 100000
Rfundir              = "/Users/Daphne/Documents/Yuan/GiniClust2_V1/Rfunction/"
#dataset specific parameters:
MinPts               = 3
eps                  = 0.45                                             # parameter for DBSCAN
mycols               = c("grey50","greenyellow","red","blue","black","green","orange","purple","yellow","navy","magenta")   # color setting for tSNE plot
workdir              = "/Users/Daphne/Documents/Yuan/GiniClust2_V1/Proj/10X_subsampled/"
#GeneList.final     = Genelist.top_pvalue
exprimentID          = "10X_sub"                                                    # experiment or data set ID
perplexity_G         = 30
perplexity_F         = 30
max_iter_G           = 1000
max_iter_F           = 1000
k                    = c(2,2,2,2,2,3,3,3) #for subsampled data, use k=2 for rarer, k=3 for more common
gap_statistic        = FALSE
K.max                = 10
automatic_eps        = FALSE
automatic_minpts     = FALSE
setwd(workdir)
source(paste(Rfundir,"GiniClust2_packages.R",sep=""))
source(paste(Rfundir,"GiniClust2_functions.R",sep=""))
i=1
j=1
exprimentID<-paste("10X_rare",j,"_",i,sep="")
source(paste(Rfundir,"GiniClust2_fitting.R",sep=""))
ExprM.RawCounts<-ExprM.RawCounts.filter
source(paste(Rfundir,"GiniClust2_Gini_clustering.R",sep=""))
print(table(P_G))
source(paste(Rfundir,"GiniClust2_Fano_clustering.R",sep=""))
print(table(P_F))
source(paste(Rfundir,"GiniClust2_consensus_clustering.R",sep=""))
print(table(finalCluster))
k
k=ks[j]
ks                   = c(2,2,2,2,2,3,3,3) #for subsampled data, use k=2 for rarer, k=3 for more common
k=ks[j]
source(paste(Rfundir,"GiniClust2_Fano_clustering.R",sep=""))
exprimentID<-paste("10X_rare",j,"_",i,sep="")
source(paste(Rfundir,"GiniClust2_fitting.R",sep=""))
j
j=1
i=1
k=ks[j]
exprimentID<-paste("10X_rare",j,"_",i,sep="")
source(paste(Rfundir,"GiniClust2_fitting.R",sep=""))
ExprM.RawCounts<-ExprM.RawCounts.filter
source(paste(Rfundir,"GiniClust2_Gini_clustering.R",sep=""))
print(table(P_G))
source(paste(Rfundir,"GiniClust2_Fano_clustering.R",sep=""))
print(table(P_F))
source(paste(Rfundir,"GiniClust2_consensus_clustering.R",sep=""))
print(table(finalCluster))
names<-colnames(ExprM.RawCounts.filter)
barData4<-cbind(finalCluster,names)
colnames(barData4)<-c("clustering","standard")
print(ggplot(data=as.data.frame(barData4), aes(x=as.factor(standard),fill=as.factor(clustering),xlab="Developmental Stage")) +
geom_bar(stat="count")+labs(x="Cell Type",y="Count",fill="Clusters"))
df <- data.frame(RareCellTypeProportion=c(rep(c(5/1205,5/605,5/305,5/155,5/80,5/43,5/24,5/14),6)),
ProportionofSamplesWithDetectedRareCellTypes=c(1/20,9/20,8/20,14/20,7/20,7/20,1/20,0,0,0,0,0,0,19/20,19/20,19/20,0,0,17/20,20/20,20/20,20/20,20/20,20/20,0,0,0,0,0,0,1/20,16/20,1/20,9/20,8/20,14/20,7/20,18/20,19/20,15/20,17/20,17/20,19/20,20/20,20/20,8/20,19/20,18/20),Method=c(rep("GiniClust",8),rep("Kmeans (k=3)",8),rep("Kmeans (k=4)",8),rep("Kmeans (k=2)",8),rep("GiniClust2",8),rep("RaceID2",8)))
head(df)
ggplot(data=df, aes(x=RareCellTypeProportion, y=ProportionofSamplesWithDetectedRareCellTypes, group=Method)) +
geom_line(aes(color=Method))+
geom_point() + labs(x="Rare Cell Type Proportion",y="Proportion of Samples with Detected Rare Cell Types")
p <- ggplot(df, aes(Method,as.factor(round(RareCellTypeProportion,2)))) + geom_tile(aes(fill = ProportionofSamplesWithDetectedRareCellTypes),colour = "white") + scale_fill_gradient(low = "white",high = "steelblue")
p+ labs(y = "Rare Cell Type Proportion")+labs(fill="Proportion of Samples with Detected Rare Cell Types")+geom_text(aes(label = ProportionofSamplesWithDetectedRareCellTypes))
p <- ggplot(df, aes(Method,as.factor(round(RareCellTypeProportion,2)))) + geom_tile(aes(fill = ProportionofSamplesWithDetectedRareCellTypes),colour = "white") + scale_fill_gradient(low = "white",high = "steelblue")
p+ labs(y = "Rare Cell Type Proportion")+labs(fill="Proportion of Samples with Detected Rare Cell Types")+geom_text(aes(label = ProportionofSamplesWithDetectedRareCellTypes))
library(NMI)
